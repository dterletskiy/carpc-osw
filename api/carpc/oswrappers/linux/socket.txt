#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/select.h>
#include <sys/ioctl.h>
#include <linux/vm_sockets.h>
#include <net/if.h> 
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>



# https://man7.org/linux/man-pages/man3/getaddrinfo.3.html
struct addrinfo
{
   int              ai_flags;
   int              ai_family;
   int              ai_socktype;
   int              ai_protocol;
   socklen_t        ai_addrlen;
   struct sockaddr *ai_addr;
   char            *ai_canonname;
   struct addrinfo *ai_next;
};

# https://man7.org/linux/man-pages/man3/getifaddrs.3.html
struct ifaddrs
{
   struct ifaddrs  *ifa_next;    /* Next item in list */
   char            *ifa_name;    /* Name of interface */
   unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */
   struct sockaddr *ifa_addr;    /* Address of interface */
   struct sockaddr *ifa_netmask; /* Netmask of interface */
   union
   {
      struct sockaddr *ifu_broadaddr;
      /* Broadcast address of interface */
      struct sockaddr *ifu_dstaddr;
      /* Point-to-point destination address */
   } ifa_ifu;
   #define              ifa_broadaddr ifa_ifu.ifu_broadaddr
   #define              ifa_dstaddr   ifa_ifu.ifu_dstaddr
   void            *ifa_data;    /* Address-specific data */
};

typedef unsigned short  sa_family_t;

struct sockaddr
{
   sa_family_t sa_family;
   char        sa_data[14];
};

# https://man7.org/linux/man-pages/man7/unix.7.html
#define UNIX_PATH_MAX   108
struct sockaddr_un
{
   sa_family_t    sun_family;                   /* address family: AF_UNIX */
   char           sun_path[ UNIX_PATH_MAX ];    /* path */
};

typedef uint16_t  in_port_t;

# https://man7.org/linux/man-pages/man7/ip.7.html
struct sockaddr_in
{
   sa_family_t    sin_family; /* address family: AF_INET */
   in_port_t      sin_port;   /* port in network byte order, e.g. htons(3490) */
   struct in_addr sin_addr;   /* internet address */
};

typedef uint32_t in_addr_t;

/* Internet address. */
struct in_addr
{
   uint32_t       s_addr;     /* address in network byte order, load with inet_aton() */
};

# https://man7.org/linux/man-pages/man7/ipv6.7.html
struct sockaddr_in6
{
   sa_family_t     sin6_family;   /* AF_INET6 */
   in_port_t       sin6_port;     /* port number */
   uint32_t        sin6_flowinfo; /* IPv6 flow information */
   struct in6_addr sin6_addr;     /* IPv6 address */
   uint32_t        sin6_scope_id; /* Scope ID (new in Linux 2.4) */
};

/* Internet address. */
struct in6_addr
{
   unsigned char   s6_addr[16];   /* IPv6 address */
};

# https://man7.org/linux/man-pages/man7/vsock.7.html
struct sockaddr_vm
{
   sa_family_t    svm_family;    /* Address family: AF_VSOCK */
   unsigned short svm_reserved1;
   unsigned int   svm_port;      /* Port # in host byte order */
   unsigned int   svm_cid;       /* Address in host byte order */
   unsigned char  svm_zero[
                       sizeof(struct sockaddr)
                     - sizeof(sa_family_t)
                     - sizeof(unsigned short)
                     - sizeof(unsigned int)
                     - sizeof(unsigned int)
                  ];
};

struct ifreq {
   char ifr_name[IFNAMSIZ]; /* Interface name */
   union
   {
      struct sockaddr ifr_addr;
      struct sockaddr ifr_dstaddr;
      struct sockaddr ifr_broadaddr;
      struct sockaddr ifr_netmask;
      struct sockaddr ifr_hwaddr;
      short           ifr_flags;
      int             ifr_ifindex;
      int             ifr_metric;
      int             ifr_mtu;
      struct ifmap    ifr_map;
      char            ifr_slave[IFNAMSIZ];
      char            ifr_newname[IFNAMSIZ];
      char           *ifr_data;
   };
};

struct in6_ifreq
{
   struct in6_addr     ifr6_addr;
   u32                 ifr6_prefixlen;
   int                 ifr6_ifindex; /* Interface index */
};
